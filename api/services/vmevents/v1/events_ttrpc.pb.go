// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: github.com/containerd/nerdbox/api/services/vmevents/v1/events.proto
package vmevents

import (
	context "context"
	types "github.com/containerd/containerd/api/types"
	ttrpc "github.com/containerd/ttrpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type TTRPCEventsService interface {
	Stream(context.Context, *emptypb.Empty, TTRPCEvents_StreamServer) error
}

type TTRPCEvents_StreamServer interface {
	Send(*types.Envelope) error
	ttrpc.StreamServer
}

type ttrpceventsStreamServer struct {
	ttrpc.StreamServer
}

func (x *ttrpceventsStreamServer) Send(m *types.Envelope) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCEventsService(srv *ttrpc.Server, svc TTRPCEventsService) {
	srv.RegisterService("nerdbox.services.vmevents.v1.Events", &ttrpc.ServiceDesc{
		Streams: map[string]ttrpc.Stream{
			"Stream": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(emptypb.Empty)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.Stream(ctx, m, &ttrpceventsStreamServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCEventsClient interface {
	Stream(context.Context, *emptypb.Empty) (TTRPCEvents_StreamClient, error)
}

type ttrpceventsClient struct {
	client *ttrpc.Client
}

func NewTTRPCEventsClient(client *ttrpc.Client) TTRPCEventsClient {
	return &ttrpceventsClient{
		client: client,
	}
}

func (c *ttrpceventsClient) Stream(ctx context.Context, req *emptypb.Empty) (TTRPCEvents_StreamClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "nerdbox.services.vmevents.v1.Events", "Stream", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpceventsStreamClient{stream}
	return x, nil
}

type TTRPCEvents_StreamClient interface {
	Recv() (*types.Envelope, error)
	ttrpc.ClientStream
}

type ttrpceventsStreamClient struct {
	ttrpc.ClientStream
}

func (x *ttrpceventsStreamClient) Recv() (*types.Envelope, error) {
	m := new(types.Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
